import ddf.minim.*;
import ddf.minim.analysis.*;

Minim minim;
AudioPlayer song;
BeatDetect beatLeft;
BeatDetect beatRight;

void setup () {
  size (1024, 512);
  background (255);

  minim = new Minim (this);
  song = minim.loadFile("PaperTrails.mp3", 1024);

  beatLeft = new BeatDetect();
  beatRight = new BeatDetect();

  song.play();
}

void draw () {
  background (255);
  
  beatDetection();
  audioWave();

  
}

void beatDetection () {
  beatLeft.detect(song.left);
  beatRight.detect(song.right);

  noStroke();
  if (beatLeft.isOnset()) {
    fill(255, 0, 0);
    rect(0, 0, width/2, height);
  }

  if (beatRight.isOnset()) {
    fill (255, 0, 0);
    rect(width/2, 0, width/2, height);
  }
}

void audioWave () {
  for (int i = 0; i < song.bufferSize() - 1; i++) {
    stroke(0);
    float x1 = map (i, 0, song.bufferSize(), 0, width);
    float x2 = map (i+1, 0, song.bufferSize(), 0, width);
    line (x1, height/3 + song.left.get(i)*50, x2, height/3 + song.left.get(i+1)*50);
    line (x1, 2*height/3 + song.right.get(i)*50, x2, 2*height/3 + song.right.get(i+1)*50);
  }
}

void stop() {
  song.close();
  minim.stop();
  super.stop();
}
